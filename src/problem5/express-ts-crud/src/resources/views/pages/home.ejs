<form name="container-form" method="POST" class="mt-4" action="/courses/handle-form-action">
    <div>
        <h3><i class="far fa-newspaper"></i> Course management</h3>

        <!-- <a href="/me/trashed/courses">Thùng rác ({{ delectedCount }})</a> -->

        <div class="mt-4 d-flex align-items-center">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="checkbox-all" />
                <label class="form-check-label" for="checkbox-all"> Select all </label>
            </div>

            <select
                required
                name="action"
                class="form-select-sm form-control-sm select-form select-form-action"
                aria-label="Default select example"
            >
                <option value="" selected>--Select action--</option>
                <option value="delete">Delete</option>
                <option value="2">Two</option>
                <option value="3">Three</option>
            </select>

            <button disabled class="btn btn-primary btn-sm btn-check-all-submit" id="btn-process-select">
                Perform
            </button>

            <button
                data-bs-toggle="modal"
                type="button"
                data-bs-target="#create-update-modal"
                class="btn btn-primary btn-sm ms-2"
                id="btn-create-course"
            >
                <i class="fas fa-plus"></i> Create the course
            </button>

            <div class="form-group m-2 d-flex align-items-center ms-5">
                <i class="fas fa-search me-2"></i>
                <input type="text" id="searchName" class="form-control" placeholder="Search by name" />
            </div>
        </div>
    </div>
    <table class="table mt-4">
        <thead>
            <tr>
                <th scope="col" colspan="2">#</th>
                <th scope="col">Course name <%-helpers.sortable('name', _sort) %></th>
                <th scope="col">Level <%-helpers.sortable('level',_sort) %></th>
                <th scope="col" colspan="2">Creat at <%-helpers.sortable('createdAt',_sort) %></th>
            </tr>
        </thead>
        <tbody>
            <% if (typeof courses !== 'undefined' && courses !== null && courses.length > 0) { courses.map((course,
            index) => { %>

            <tr>
                <td>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="courseIds[]" value="<%=course._id%>" />
                    </div>
                </td>
                <th scope="row"><%= (index + 1)%></th>
                <td><%=course.name%></td>
                <td><%=course.level%></td>
                <td><%=course.createdAt%></td>
                <td>
                    <button
                        id="btn-detail"
                        data-id="<%=course._id%>"
                        type="button"
                        class="btn btn-hover btn-detail"
                        data-bs-target="#detailModal"
                        data-bs-toggle="modal"
                    >
                        <i class="fas fa-external-link-alt"></i> Detail
                    </button>
                    <button
                        type="button"
                        data-id="<%=course._id%>"
                        class="btn btn-hover btn-edit-course"
                        data-bs-target="#create-update-modal"
                        data-bs-toggle="modal"
                    >
                        <i class="fas fa-edit"></i> Edit
                    </button>
                    <a
                        href="button"
                        class="btn btn-hover btn-delete-single-course"
                        data-id="<%=course._id%>"
                        data-bs-toggle="modal"
                        data-bs-target="#delete-course-modal"
                        ><i class="fas fa-trash-alt"></i> Delete</a
                    >
                </td>
            </tr>
            <% })}else{ %>
            <tr>
                <td colspan="5" class="text-center">
                    There are no courses.
                    <a href="button" class="btn-link" data-bs-toggle="modal" data-bs-target="#create-update-modal">
                        Create the course</a
                    >
                </td>
            </tr>
            <% }%>
        </tbody>
    </table>
</form>

<%- include('../modal/modalCreateUpdate.ejs') %> <%- include('../modal/modalDetail.ejs') %> <%-
include('../modal/modalDelete.ejs') %> <%- include('../modal/modalDetail.ejs') %>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var courseId;

        let coursesList = <%- JSON.stringify(courses) %> ;
        
        let proccessAction;

        var deleteForm = document.forms["delete-course-form"];
        const containerForm = $('form[name="container-form"]');
        const btnDeleteCourse = $(".btn-delete-course");
        const checkboxAll = $("#checkbox-all");
        const courseItemCheckbox = $('input[name="courseIds[]"]');
        const checkAllSunmitBtn = $(".btn-check-all-submit");

        const btnDetail = $(".btn-detail");
        const btnUpdate = $(".btn-edit-course");
        const btnCreate = $("#btn-create-course");

        console.log(containerForm);

        $("#delete-course-modal").on("show.bs.modal", function (event) {
            var button = $(event.relatedTarget);
            var id = button.data("id");
            courseId = id;
        });

        $(document).on("click", ".btn-delete-course", function () {
            deleteForm.action = `/courses/${courseId}?_method=DELETE`;
            deleteForm.submit();
            $("#delete-course-modal #btn-delete-course").removeClass(".btn-delete-course");
        });

        $(document).on("click", ".btn-delete-single-course", function () {
            $("#delete-course-modal #btn-delete-course").addClass("btn-delete-course");
            $("#delete-course-modal .modal-body p").html("Are you sure you want to delete this course?");
        });
        //checkbox all clicked
        checkboxAll.change(function () {
            const isCheckedAll = $(this).prop("checked");
            courseItemCheckbox.prop("checked", isCheckedAll);
            renderCheckAllSubmitbtn();
        });
        //checkbox course item clicked
        courseItemCheckbox.change(function () {
            const isCheckedAll = courseItemCheckbox.length === $('input[name="courseIds[]"]:checked').length;
            checkboxAll.prop("checked", isCheckedAll);
            renderCheckAllSubmitbtn();
        });
        //check-all submit click

        containerForm.on("submit", function (e) {
            const isSubmitTable = checkAllSunmitBtn.hasClass("disabled");
            if (isSubmitTable) {
                e.preventDefault();
            }
        });

        // Process button detail
        $(document).on("click", ".btn-detail", function () {
            const id = $(this).data("id");
            const courseDetail = coursesList.filter((course) => course._id === id)[0];

            $("#img-course-detail").attr("src", courseDetail.image);
            $("#description-course-detail").html(courseDetail.description);
            $("#title-course-detail").html(courseDetail.name);
            $("#createAt-course-detail").html(`Create at:  ${formatDate(courseDetail.createdAt)}`);
        });

        // Event button edit
        $(document).on("click", ".btn-edit-course", function () {
            const id = $(this).data("id");
            const courseDetail = coursesList.filter((course) => course._id === id)[0];

            $("#create-update-modal #title-form").html("Update the course");
            $("#btn-form-name").html("Update");
            $("#name").val(courseDetail.name);
            $("#description").val(courseDetail.description);
            $("#level").val(courseDetail.level);
            $("#img-preview").attr("src", courseDetail.image);
            $(".form-create-update").attr("action", "/courses/" + id + "?_method=PUT");
            $("#image").val("");
        });

        // Event button create
        btnCreate.on("click", function () {
            $("#create-update-modal #title-form").html("Create the course");
            $("#btn-form-name").html("Create");
            $("#name").val("");
            $("#description").val("");
            $("#videoId").val("");
            $("#level").val("");
            $(".form-create-update").attr("action", "/courses/create");
            $("#img-preview").attr("src", "");
        });

        // Process search input
        let typingTimer; // Timer identifier
        const doneTypingInterval = 500; // Time in ms (500ms = 0.5s)
        $("#searchName").on("input", function () {
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                searchCourses();
                checkReload();
            }, doneTypingInterval);
        });

        // process select action
        $(document).on("change", ".select-form-action", function () {
            proccessAction = $(this).val();
        });

        // Event button process-select
        $(document).on("click", "#btn-process-select", function (e) {
            e.preventDefault();

            switch (proccessAction) {
                case "delete":
                    $("#delete-course-modal .modal-body p").html(
                        "Do you want to delete the courses you have selected?"
                    );
                    $("#delete-course-modal #btn-delete-course").addClass("btn-delete-all-course");
                    $("#delete-course-modal").modal("show");
                //deleteAll();
                default:
                    console.log(proccessAction);
                    break;
            }
        });

        // Event button delete all

        $(document).on("click", ".btn-delete-all-course", function () {
            deleteAll();
        });

        $(document).on("change", "#image", function (event) {
            var file = event.target.files[0];
            var reader = new FileReader();

            reader.onload = function (e) {
                $("#img-preview").attr("src", e.target.result);
            };

            reader.readAsDataURL(file);
        });

        /*=============== Function =================*/

        function deleteAll() {
            const checkedElements = $('input[name="courseIds[]"]:checked').clone();
            const deleteAllForm = $(".delete-all-course-form");

            deleteAllForm.append(checkedElements);
            deleteAllForm.children("input").attr("hidden", true);

            deleteAllForm.attr("action", "/courses/deleteAll?_method=DELETE");
            deleteAllForm.submit();

            $("#delete-course-modal #btn-delete-course").removeClass("btn-delete-all-course");
        }

        function checkReload() {
            const searchName = $("#searchName").val()?.toLowerCase() || "";
            const searchLevel = $("#searchLevel").val()?.toLowerCase() || "";

            if (searchName === "" && searchLevel === "") {
                location.reload();
            }
        }

        function searchCourses() {
            const searchName = $("#searchName").val()?.toLowerCase() || "";
            const searchLevel = $("#searchLevel").val()?.toLowerCase() || "";

            const filteredCourses = coursesList.filter((course) => {
                const matchesName = course.name.toLowerCase().includes(searchName);
                const matchesLevel = searchLevel === "" || course.level.toLowerCase() === searchLevel;
                return matchesName && matchesLevel;
            });

            displayResults(filteredCourses);
        }

        function displayResults(filteredCourses) {
            let str;

            str = `
                <tr>
                    <td colspan="5" class="text-center">
                        No found course.
                    </td>
                </tr>
            `;
            const resultsDiv = $("tbody");
            resultsDiv.html("");

            resultsDiv.empty();

            if (filteredCourses.length === 0) {
                resultsDiv.append(str);
                return;
            }

            filteredCourses.map((course, index) => {
                str = `
                    <tr>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="courseIds[]" value="{{ this._id }}" />
                        </div>
                    </td>
                    <th scope="row">${index + 1}</th>
                    <td>${course.name}</td>
                    <td>${course.level}</td>
                    <td>${course.createdAt}</td>
                    <td>
                        <button
                            id="btn-detail"
                            data-id="${course._id}"
                            type="button"
                            class="btn btn-detail"
                            data-bs-target="#detailModal"
                            data-bs-toggle="modal"
                        >
                            <i class="fas fa-external-link-alt"></i> Detail
                        </button>
                        <button
                            type="button"
                            data-id="${course._id}"
                            class="btn btn-edit-course"
                            data-bs-target="#create-update-modal"
                            data-bs-toggle="modal"
                        >
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <a
                            href="button"
                            class="btn"
                            data-id="${course._id}"
                            data-bs-toggle="modal"
                            data-bs-target="#delete-course-modal"
                            ><i class="fas fa-trash-alt"></i> Delete</a
                        >
                    </td>
                </tr>
                `;

                resultsDiv.append(str);
            });
        }

        function formatDate(date) {
            date = new Date(date);
            const locale = navigator.language;

            const options = {
                year: "numeric",
                month: "long",
                day: "numeric",
                hour: "numeric",
                minute: "numeric",
                second: "numeric",
                timeZoneName: "short",
            };

            return new Intl.DateTimeFormat(locale, options).format(date);
        }

        //re-render btn checkAll
        function renderCheckAllSubmitbtn() {
            const checkedCount = $('input[name="courseIds[]"]:checked').length;
            if (checkedCount > 0) {
                checkAllSunmitBtn.removeAttr("disabled");
            } else {
                checkAllSunmitBtn.attr("disabled", true);
            }
        }
    });
</script>
